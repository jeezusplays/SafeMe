version: '3'

networks:
  service_network:
    driver: bridge
volumes:
  pgdata: 
  kongadata:
  
services:
  user:
    build: ./microservices/user
    environment:
      USER_DB_NAME: ${USER_DB_NAME}
      USER_HOST_PORT: ${USER_HOST_PORT}
    ports:
      - "${USER_HOST_PORT}:${USER_HOST_PORT}"
    depends_on:
      - user-db
    networks:
      - service_network

  user-db:
    image: mysql:8.0.31
    command: --sql-mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
    ports:
      - "${USER_DB_HOST_PORT}:3306"
    volumes:
      - ./microservices/user/db.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    networks:
      - service_network

  disaster:
    build: ./microservices/disaster
    environment:
      DISASTER_DB_NAME: ${DISASTER_DB_NAME}
      DISASTER_HOST_PORT: ${DISASTER_HOST_PORT}
    ports:
      - "${DISASTER_HOST_PORT}:${DISASTER_HOST_PORT}"
    depends_on:
      - disaster-db
    networks:
      - service_network

  disaster-db:
    image: mysql:8.0.31
    ports:
      - "${DISASTER_DB_HOST_PORT}:3306"
    volumes:
      - ./microservices/disaster/db.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_INIT_COMMAND: "SET GLOBAL sql_mode=''"
    networks:
      - service_network

  volunteerevent:
    build: ./microservices/volunteerevent
    environment:
      VOLUNTEEREVENT_DB_NAME: ${VOLUNTEEREVENT_DB_NAME}
      VOLUNTEEREVENT_HOST_PORT: ${VOLUNTEEREVENT_HOST_PORT}
    ports:
      - "${VOLUNTEEREVENT_HOST_PORT}:${VOLUNTEEREVENT_HOST_PORT}"
    depends_on:
      - volunteerevent-db
    networks:
      - service_network

  volunteerevent-db:
    image: mysql:8.0.31
    ports:
      - "${VOLUNTEEREVENT_DB_HOST_PORT}:3306"
    volumes:
      - ./microservices/volunteerevent/db.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    networks:
      - service_network

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      MYSQL_INIT_COMMAND: "SET GLOBAL sql_mode=''"
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "15672:15672"
    networks:
      - service_network

  rabbitmq-setup:
    build: ./microservices/amqp
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    depends_on:
      - rabbitmq
    networks:
      - service_network

  getalert:
    build: ./microservices/getalert
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    depends_on:
      - rabbitmq
    networks:
      - service_network
      
  websocket:
    build: ./microservices/app_websocket
    environment:
      SAFEME_WEBSOCKET_HOST_PORT: ${SAFEME_WEBSOCKET_HOST_PORT}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    ports:
      - "${SAFEME_WEBSOCKET_HOST_PORT}:${SAFEME_WEBSOCKET_HOST_PORT}"
    depends_on:
      - rabbitmq
    networks:
      - service_network     
    
  createdisaster:
    build: ./microservices/createdisaster
    environment:
      USER_HOST_PORT: ${USER_HOST_PORT}
      DISASTER_HOST_PORT: ${DISASTER_HOST_PORT}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    depends_on:
      - rabbitmq
    networks:
      - service_network
    restart: "always"
      
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - service_network
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - service_network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    restart: always
    networks:
      - service_network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./apigateway/kong.yml:/usr/local/kong/declarative/kong.yml
    depends_on:
      - kong-migration
    ports:
      - "${KONG_API_PORT}:${KONG_API_PORT}"
      - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - service_network
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata